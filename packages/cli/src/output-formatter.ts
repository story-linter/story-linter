import type { ValidationResult, ValidationError, ValidationWarning, ValidationInfo } from '@story-linter/core';

export interface OutputFormatter {
  format(result: ValidationResult): string;
}

export interface ColorPort {
  red(text: string): string;
  green(text: string): string;
  yellow(text: string): string;
  blue(text: string): string;
  gray(text: string): string;
  bold(text: string): string;
}

export class TextOutputFormatter implements OutputFormatter {
  constructor(
    private readonly colors: ColorPort,
    private readonly version?: string
  ) {}
  
  format(result: ValidationResult): string {
    const lines: string[] = [''];
    
    // Add summary
    this.addSummary(lines, result);
    
    // Add errors
    if (result.errors.length > 0) {
      this.addErrors(lines, result.errors);
    }
    
    // Add warnings
    if (result.warnings.length > 0) {
      this.addWarnings(lines, result.warnings);
    }
    
    // Add info (only if no errors/warnings)
    if (result.info.length > 0 && result.errors.length === 0 && result.warnings.length === 0) {
      this.addInfo(lines, result.info);
    }
    
    // Add statistics
    this.addStatistics(lines, result);
    
    return lines.join('\n');
  }
  
  private addSummary(lines: string[], result: ValidationResult): void {
    if (result.valid) {
      lines.push(this.colors.green('✓ All validation checks passed!'));
    } else {
      lines.push(this.colors.red(`✗ Found ${result.errors.length} errors`));
    }
    
    if (result.warnings.length > 0) {
      lines.push(this.colors.yellow(`⚠ ${result.warnings.length} warnings`));
    }
    
    lines.push('');
  }
  
  private addErrors(lines: string[], errors: ValidationError[]): void {
    lines.push(this.colors.bold(this.colors.red('Errors:')));
    
    errors.forEach(error => {
      const location = this.formatLocation(error.file, error.line, error.column);
      lines.push(
        '  ' + this.colors.red(`✗ [${error.code}] ${location}`) + ' ' + error.message
      );
    });
    
    lines.push('');
  }
  
  private addWarnings(lines: string[], warnings: ValidationWarning[]): void {
    lines.push(this.colors.bold(this.colors.yellow('Warnings:')));
    
    warnings.forEach(warning => {
      const location = this.formatLocation(warning.file, warning.line);
      lines.push(
        '  ' + this.colors.yellow(`⚠ [${warning.code}] ${location}`) + ' ' + warning.message
      );
    });
    
    lines.push('');
  }
  
  private addInfo(lines: string[], info: ValidationInfo[]): void {
    lines.push(this.colors.bold(this.colors.blue('Info:')));
    
    info.forEach(item => {
      lines.push(
        '  ' + this.colors.blue(`ℹ [${item.code}]`) + ' ' + item.message
      );
    });
    
    lines.push('');
  }
  
  private addStatistics(lines: string[], result: ValidationResult): void {
    lines.push(this.colors.gray('─'.repeat(50)));
    lines.push(
      this.colors.gray('Summary:') + ' ' +
      this.colors.red(`${result.errors.length} errors`) + ' ' +
      this.colors.yellow(`${result.warnings.length} warnings`) + ' ' +
      this.colors.blue(`${result.info.length} info`)
    );
  }
  
  private formatLocation(file?: string, line?: number, column?: number): string {
    if (!file) return 'unknown';
    
    let location = file;
    if (line) location += `:${line}`;
    if (column) location += `:${column}`;
    
    return location;
  }
}

export class JsonOutputFormatter implements OutputFormatter {
  format(result: ValidationResult): string {
    return JSON.stringify(result, null, 2);
  }
}

export class HtmlOutputFormatter implements OutputFormatter {
  constructor(private readonly version?: string) {}
  
  format(result: ValidationResult): string {
    return `<!DOCTYPE html>
<html>
<head>
  <title>Story Linter Report</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    .error { color: #d32f2f; }
    .warning { color: #f57c00; }
    .info { color: #0288d1; }
    .success { color: #388e3c; }
    .issue { margin: 10px 0; padding: 10px; background: #f5f5f5; }
    .summary { font-size: 1.2em; margin: 20px 0; }
  </style>
</head>
<body>
  <h1>Story Linter Validation Report</h1>
  
  <div class="summary ${result.valid ? 'success' : 'error'}">
    ${result.valid ? '✓ All checks passed!' : `✗ ${result.errors.length} errors found`}
  </div>
  
  ${this.renderErrors(result.errors)}
  ${this.renderWarnings(result.warnings)}
  ${this.renderInfo(result.info)}
  
  <hr>
  <p>Generated by Story Linter${this.version ? ` v${this.version}` : ''}</p>
</body>
</html>`;
  }
  
  private renderErrors(errors: ValidationError[]): string {
    if (errors.length === 0) return '';
    
    return `
    <h2 class="error">Errors</h2>
    ${errors.map(e => `
      <div class="issue">
        <strong>[${e.code}]</strong> ${e.file || 'unknown'}${e.line ? ':' + e.line : ''}<br>
        ${this.escapeHtml(e.message)}
      </div>
    `).join('')}`;
  }
  
  private renderWarnings(warnings: ValidationWarning[]): string {
    if (warnings.length === 0) return '';
    
    return `
    <h2 class="warning">Warnings</h2>
    ${warnings.map(w => `
      <div class="issue">
        <strong>[${w.code}]</strong> ${w.file || 'unknown'}${w.line ? ':' + w.line : ''}<br>
        ${this.escapeHtml(w.message)}
      </div>
    `).join('')}`;
  }
  
  private renderInfo(info: ValidationInfo[]): string {
    if (info.length === 0) return '';
    
    return `
    <h2 class="info">Info</h2>
    ${info.map(i => `
      <div class="issue">
        <strong>[${i.code}]</strong><br>
        ${this.escapeHtml(i.message)}
      </div>
    `).join('')}`;
  }
  
  private escapeHtml(text: string): string {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }
}